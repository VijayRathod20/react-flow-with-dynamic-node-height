{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { useReactFlow, useStore, Position } from \"reactflow\";\nimport { stratify } from \"d3-hierarchy\";\nimport { timer } from \"d3-timer\";\nimport dagre from 'def';\nconst nodeWidth = 210;\nconst nodeHeight = 100;\nconst getLayoutedElements = (nodes, edges, direction = \"TB\") => {\n  const dagreGraph = new dagre.graphlib.Graph();\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({\n    rankdir: direction\n  });\n  nodes.forEach(el => {\n    dagreGraph.setNode(el.id, {\n      width: nodeWidth,\n      height: nodeHeight\n    });\n  });\n  edges.forEach(el => {\n    dagreGraph.setEdge(el.source, el.target);\n  });\n  dagre.layout(dagreGraph);\n  const newNodes = nodes.map(el => {\n    const nodeWithPosition = dagreGraph.node(el.id);\n    el.targetPosition = isHorizontal ? Position.Left : Position.Bottom;\n    el.sourcePosition = isHorizontal ? Position.Right : Position.Top;\n\n    // unfortunately we need this little hack to pass a slighltiy different position\n    // to notify react flow about the change. More over we are shifting the dagre node position\n    // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n    el.position = {\n      x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\n      y: nodeWithPosition.y - nodeHeight / 2\n    };\n    return el;\n  });\n  const newEdges = edges.map(edge => {\n    return {\n      ...edge,\n      sourceHandle: direction === \"TB\" ? Position.Bottom : Position.Right,\n      targetHandle: direction === \"TB\" ? Position.Top : Position.Left\n    };\n  });\n  return {\n    newNodes,\n    newEdges\n  };\n};\n\n// const options = { duration: 300 };\n\n// function configureLayout(direction: \"TB\" | \"LR\") {\n//   const layout = tree<Node>();\n\n//   if (direction === \"TB\") {\n//     // Top-to-Bottom\n//     layout.nodeSize([200, 150]); // [width, height]\n//   } else if (direction === \"LR\") {\n//     // Left-to-Right\n//     layout.nodeSize([150, 250]); // [height, width]\n//   }\n\n//   console.log({ direction });\n\n//   layout.separation(() => 1); // Create equal spacing between nodes\n//   return layout;\n// }\n\n// the layouting function\n// accepts current nodes and edges and returns the layouted nodes with their updated positions\nfunction layoutNodes(nodes, edges, direction) {\n  // if there are no nodes we can't calculate a layout\n  if (nodes.length === 0) {\n    return [];\n  }\n  const layout = configureLayout(direction);\n\n  // convert nodes and edges into a hierarchical object for using it with the layout function\n  const hierarchy = stratify().id(d => d.id)\n  // get the id of each node by searching through the edges\n  // this only works if every node has one connection\n  .parentId(d => {\n    var _edges$find;\n    return (_edges$find = edges.find(e => e.target === d.id)) === null || _edges$find === void 0 ? void 0 : _edges$find.source;\n  })(nodes);\n\n  // run the layout algorithm with the hierarchy data structure\n  const root = layout(hierarchy);\n\n  // convert the hierarchy back to react flow nodes (the original node is stored as d.data)\n  // we only extract the position from the d3 function\n  return root.descendants().map(d => ({\n    ...d.data,\n    position: direction === \"TB\" ? {\n      x: d.x,\n      y: d.y\n    } : {\n      x: d.y,\n      y: d.x\n    }\n  }));\n}\n\n// this is the store selector that is used for triggering the layout, this returns the number of nodes once they change\nconst nodeCountSelector = state => state.nodeInternals.size;\nfunction useLayout(direction) {\n  _s();\n  // this ref is used to fit the nodes in the first run\n  // after first run, this is set to false\n  const initial = useRef(true);\n\n  // we are using nodeCount as the trigger for the re-layouting\n  // whenever the nodes length changes, we calculate the new layout\n  const nodeCount = useStore(nodeCountSelector);\n  const {\n    getNodes,\n    getNode,\n    setNodes,\n    setEdges,\n    getEdges,\n    fitView\n  } = useReactFlow();\n  useEffect(() => {\n    // get the current nodes and edges\n    const nodes = getNodes();\n    const edges = getEdges();\n\n    // run the layout and get back the nodes with their updated positions\n    const targetNodes = layoutNodes(nodes, edges, direction);\n    console.log({\n      targetNodes\n    });\n    setEdges(edges.map(edge => {\n      return {\n        ...edge,\n        sourceHandle: direction === \"TB\" ? Position.Bottom : Position.Right,\n        targetHandle: direction === \"TB\" ? Position.Top : Position.Left\n      };\n    }));\n\n    // if you do not want to animate the nodes, you can uncomment the following line\n    // return setNodes(targetNodes);\n\n    // to interpolate and animate the new positions, we create objects that contain the current and target position of each node\n    const transitions = targetNodes.map(node => {\n      var _getNode;\n      return {\n        id: node.id,\n        // this is where the node currently is placed\n        from: ((_getNode = getNode(node.id)) === null || _getNode === void 0 ? void 0 : _getNode.position) || node.position,\n        // this is where we want the node to be placed\n        to: node.position,\n        node\n      };\n    });\n\n    // create a timer to animate the nodes to their new positions\n    const t = timer(elapsed => {\n      const s = elapsed / options.duration;\n      const currNodes = transitions.map(({\n        node,\n        from,\n        to\n      }) => {\n        return {\n          id: node.id,\n          position: {\n            // simple linear interpolation\n            x: from.x + (to.x - from.x) * s,\n            y: from.y + (to.y - from.y) * s\n          },\n          data: {\n            ...node.data\n          },\n          type: node.type\n        };\n      });\n      setNodes(currNodes);\n\n      // this is the final step of the animation\n      if (elapsed > options.duration) {\n        // we are moving the nodes to their destination\n        // this needs to happen to avoid glitches\n        const finalNodes = transitions.map(({\n          node,\n          to\n        }) => {\n          return {\n            id: node.id,\n            position: {\n              x: to.x,\n              y: to.y\n            },\n            data: {\n              ...node.data\n            },\n            type: node.type\n          };\n        });\n        setNodes(finalNodes);\n\n        // stop the animation\n        t.stop();\n\n        // in the first run, fit the view\n        if (!initial.current) {\n          fitView({\n            duration: 200,\n            padding: 0.2\n          });\n        }\n        initial.current = false;\n      }\n    });\n    return () => {\n      t.stop();\n    };\n  }, [nodeCount, getEdges, getNodes, getNode, setNodes, fitView, setEdges, direction]);\n}\n_s(useLayout, \"zrYtkHcqYIaExcPTXKgkfLp496k=\", false, function () {\n  return [useStore, useReactFlow];\n});\nexport default useLayout;","map":{"version":3,"names":["useEffect","useRef","useReactFlow","useStore","Position","stratify","timer","dagre","nodeWidth","nodeHeight","getLayoutedElements","nodes","edges","direction","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","isHorizontal","setGraph","rankdir","forEach","el","setNode","id","width","height","setEdge","source","target","layout","newNodes","map","nodeWithPosition","node","targetPosition","Left","Bottom","sourcePosition","Right","Top","position","x","Math","random","y","newEdges","edge","sourceHandle","targetHandle","layoutNodes","length","configureLayout","hierarchy","d","parentId","_edges$find","find","e","root","descendants","data","nodeCountSelector","state","nodeInternals","size","useLayout","_s","initial","nodeCount","getNodes","getNode","setNodes","setEdges","getEdges","fitView","targetNodes","console","log","transitions","_getNode","from","to","t","elapsed","s","options","duration","currNodes","type","finalNodes","stop","current","padding"],"sources":["/home/vijay-rathod/Downloads/workflow-builder-example (2)/src/hooks/useLayout.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport {\n  useReactFlow,\n  useStore,\n  Node,\n  Edge,\n  ReactFlowState,\n  Position,\n} from \"reactflow\";\nimport { stratify, tree } from \"d3-hierarchy\";\nimport { timer } from \"d3-timer\";\nimport dagre from 'def'\n\nconst nodeWidth = 210;\nconst nodeHeight = 100;\n\nconst getLayoutedElements = (\n  nodes: Node[],\n  edges: Edge[],\n  direction = \"TB\"\n) => {\n  const dagreGraph = new dagre.graphlib.Graph();\n\n  dagreGraph.setDefaultEdgeLabel(() => ({}));\n\n  const isHorizontal = direction === \"LR\";\n  dagreGraph.setGraph({ rankdir: direction });\n\n  nodes.forEach((el) => {\n    dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\n  });\n\n  edges.forEach((el) => {\n    dagreGraph.setEdge(el.source, el.target);\n  });\n\n  dagre.layout(dagreGraph);\n\n  const newNodes = nodes.map((el) => {\n    const nodeWithPosition = dagreGraph.node(el.id);\n    el.targetPosition = isHorizontal ? Position.Left : Position.Bottom;\n    el.sourcePosition = isHorizontal ? Position.Right : Position.Top;\n\n    // unfortunately we need this little hack to pass a slighltiy different position\n    // to notify react flow about the change. More over we are shifting the dagre node position\n    // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n    el.position = {\n      x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\n      y: nodeWithPosition.y - nodeHeight / 2,\n    };\n\n    return el;\n  });\n\n  const newEdges = edges.map((edge) => {\n    return {\n      ...edge,\n      sourceHandle: direction === \"TB\" ? Position.Bottom : Position.Right,\n      targetHandle: direction === \"TB\" ? Position.Top : Position.Left,\n    };\n  });\n  return { newNodes, newEdges };\n};\n\n// const options = { duration: 300 };\n\n// function configureLayout(direction: \"TB\" | \"LR\") {\n//   const layout = tree<Node>();\n\n//   if (direction === \"TB\") {\n//     // Top-to-Bottom\n//     layout.nodeSize([200, 150]); // [width, height]\n//   } else if (direction === \"LR\") {\n//     // Left-to-Right\n//     layout.nodeSize([150, 250]); // [height, width]\n//   }\n\n//   console.log({ direction });\n\n//   layout.separation(() => 1); // Create equal spacing between nodes\n//   return layout;\n// }\n\n// the layouting function\n// accepts current nodes and edges and returns the layouted nodes with their updated positions\nfunction layoutNodes(\n  nodes: Node[],\n  edges: Edge[],\n  direction: \"TB\" | \"LR\"\n): Node[] {\n  // if there are no nodes we can't calculate a layout\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const layout = configureLayout(direction);\n\n  // convert nodes and edges into a hierarchical object for using it with the layout function\n  const hierarchy = stratify<Node>()\n    .id((d) => d.id)\n    // get the id of each node by searching through the edges\n    // this only works if every node has one connection\n    .parentId((d: Node) => edges.find((e: Edge) => e.target === d.id)?.source)(\n    nodes\n  );\n\n  // run the layout algorithm with the hierarchy data structure\n  const root = layout(hierarchy);\n\n  // convert the hierarchy back to react flow nodes (the original node is stored as d.data)\n  // we only extract the position from the d3 function\n  return root.descendants().map((d) => ({\n    ...d.data,\n    position: direction === \"TB\" ? { x: d.x, y: d.y } : { x: d.y, y: d.x },\n  }));\n}\n\n// this is the store selector that is used for triggering the layout, this returns the number of nodes once they change\nconst nodeCountSelector = (state: ReactFlowState) => state.nodeInternals.size;\n\nfunction useLayout(direction: \"TB\" | \"LR\") {\n  // this ref is used to fit the nodes in the first run\n  // after first run, this is set to false\n  const initial = useRef(true);\n\n  // we are using nodeCount as the trigger for the re-layouting\n  // whenever the nodes length changes, we calculate the new layout\n  const nodeCount = useStore(nodeCountSelector);\n\n  const { getNodes, getNode, setNodes, setEdges, getEdges, fitView } =\n    useReactFlow();\n\n  useEffect(() => {\n    // get the current nodes and edges\n    const nodes = getNodes();\n    const edges = getEdges();\n\n    // run the layout and get back the nodes with their updated positions\n    const targetNodes = layoutNodes(nodes, edges, direction);\n\n    console.log({ targetNodes });\n\n    setEdges(\n      edges.map((edge) => {\n        return {\n          ...edge,\n          sourceHandle: direction === \"TB\" ? Position.Bottom : Position.Right,\n          targetHandle: direction === \"TB\" ? Position.Top : Position.Left,\n        };\n      })\n    );\n\n    // if you do not want to animate the nodes, you can uncomment the following line\n    // return setNodes(targetNodes);\n\n    // to interpolate and animate the new positions, we create objects that contain the current and target position of each node\n    const transitions = targetNodes.map((node) => {\n      return {\n        id: node.id,\n        // this is where the node currently is placed\n        from: getNode(node.id)?.position || node.position,\n        // this is where we want the node to be placed\n        to: node.position,\n        node,\n      };\n    });\n\n    // create a timer to animate the nodes to their new positions\n    const t = timer((elapsed: number) => {\n      const s = elapsed / options.duration;\n\n      const currNodes = transitions.map(({ node, from, to }) => {\n        return {\n          id: node.id,\n          position: {\n            // simple linear interpolation\n            x: from.x + (to.x - from.x) * s,\n            y: from.y + (to.y - from.y) * s,\n          },\n          data: { ...node.data },\n          type: node.type,\n        };\n      });\n\n      setNodes(currNodes);\n\n      // this is the final step of the animation\n      if (elapsed > options.duration) {\n        // we are moving the nodes to their destination\n        // this needs to happen to avoid glitches\n        const finalNodes = transitions.map(({ node, to }) => {\n          return {\n            id: node.id,\n            position: {\n              x: to.x,\n              y: to.y,\n            },\n            data: { ...node.data },\n            type: node.type,\n          };\n        });\n\n        setNodes(finalNodes);\n\n        // stop the animation\n        t.stop();\n\n        // in the first run, fit the view\n        if (!initial.current) {\n          fitView({ duration: 200, padding: 0.2 });\n        }\n        initial.current = false;\n      }\n    });\n\n    return () => {\n      t.stop();\n    };\n  }, [\n    nodeCount,\n    getEdges,\n    getNodes,\n    getNode,\n    setNodes,\n    fitView,\n    setEdges,\n    direction,\n  ]);\n}\n\nexport default useLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}