{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { useReactFlow, useStore } from \"reactflow\";\nimport { stratify, tree } from \"d3-hierarchy\";\nimport { timer } from \"d3-timer\";\nconst options = {\n  duration: 300\n};\nfunction configureLayout(direction) {\n  const layout = tree();\n  if (direction === \"TB\") {\n    // Top-to-Bottom\n    layout.nodeSize([200, 150]); // [width, height]\n  } else if (direction === \"LR\") {\n    // Left-to-Right\n    layout.nodeSize([150, 200]); // [height, width]\n  }\n  console.log({\n    direction\n  });\n  layout.separation(() => 1); // Create equal spacing between nodes\n  return layout;\n}\n\n// the layouting function\n// accepts current nodes and edges and returns the layouted nodes with their updated positions\nfunction layoutNodes(nodes, edges) {\n  // if there are no nodes we can't calculate a layout\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  // run the layout algorithm with the hierarchy data structure\n  const root = configureLayout(hierarchy);\n\n  // convert nodes and edges into a hierarchical object for using it with the layout function\n  const hierarchy = stratify().id(d => d.id)\n  // get the id of each node by searching through the edges\n  // this only works if every node has one connection\n  .parentId(d => {\n    var _edges$find;\n    return (_edges$find = edges.find(e => e.target === d.id)) === null || _edges$find === void 0 ? void 0 : _edges$find.source;\n  })(nodes);\n\n  // convert the hierarchy back to react flow nodes (the original node is stored as d.data)\n  // we only extract the position from the d3 function\n  return root.descendants().map(d => ({\n    ...d.data,\n    position: {\n      x: d.x,\n      y: d.y\n    }\n  }));\n}\n\n// this is the store selector that is used for triggering the layout, this returns the number of nodes once they change\nconst nodeCountSelector = state => state.nodeInternals.size;\nfunction useLayout() {\n  _s();\n  // this ref is used to fit the nodes in the first run\n  // after first run, this is set to false\n  const initial = useRef(true);\n\n  // we are using nodeCount as the trigger for the re-layouting\n  // whenever the nodes length changes, we calculate the new layout\n  const nodeCount = useStore(nodeCountSelector);\n  const {\n    getNodes,\n    getNode,\n    setNodes,\n    setEdges,\n    getEdges,\n    fitView\n  } = useReactFlow();\n  useEffect(() => {\n    // get the current nodes and edges\n    const nodes = getNodes();\n    const edges = getEdges();\n\n    // run the layout and get back the nodes with their updated positions\n    const targetNodes = layoutNodes(nodes, edges);\n\n    // if you do not want to animate the nodes, you can uncomment the following line\n    // return setNodes(targetNodes);\n\n    // to interpolate and animate the new positions, we create objects that contain the current and target position of each node\n    const transitions = targetNodes.map(node => {\n      var _getNode;\n      return {\n        id: node.id,\n        // this is where the node currently is placed\n        from: ((_getNode = getNode(node.id)) === null || _getNode === void 0 ? void 0 : _getNode.position) || node.position,\n        // this is where we want the node to be placed\n        to: node.position,\n        node\n      };\n    });\n\n    // create a timer to animate the nodes to their new positions\n    const t = timer(elapsed => {\n      const s = elapsed / options.duration;\n      const currNodes = transitions.map(({\n        node,\n        from,\n        to\n      }) => {\n        return {\n          id: node.id,\n          position: {\n            // simple linear interpolation\n            x: from.x + (to.x - from.x) * s,\n            y: from.y + (to.y - from.y) * s\n          },\n          data: {\n            ...node.data\n          },\n          type: node.type\n        };\n      });\n      setNodes(currNodes);\n\n      // this is the final step of the animation\n      if (elapsed > options.duration) {\n        // we are moving the nodes to their destination\n        // this needs to happen to avoid glitches\n        const finalNodes = transitions.map(({\n          node,\n          to\n        }) => {\n          return {\n            id: node.id,\n            position: {\n              x: to.x,\n              y: to.y\n            },\n            data: {\n              ...node.data\n            },\n            type: node.type\n          };\n        });\n        setNodes(finalNodes);\n\n        // stop the animation\n        t.stop();\n\n        // in the first run, fit the view\n        if (!initial.current) {\n          fitView({\n            duration: 200,\n            padding: 0.2\n          });\n        }\n        initial.current = false;\n      }\n    });\n    return () => {\n      t.stop();\n    };\n  }, [nodeCount, getEdges, getNodes, getNode, setNodes, fitView, setEdges]);\n}\n_s(useLayout, \"zrYtkHcqYIaExcPTXKgkfLp496k=\", false, function () {\n  return [useStore, useReactFlow];\n});\nexport default useLayout;","map":{"version":3,"names":["useEffect","useRef","useReactFlow","useStore","stratify","tree","timer","options","duration","configureLayout","direction","layout","nodeSize","console","log","separation","layoutNodes","nodes","edges","length","root","hierarchy","id","d","parentId","_edges$find","find","e","target","source","descendants","map","data","position","x","y","nodeCountSelector","state","nodeInternals","size","useLayout","_s","initial","nodeCount","getNodes","getNode","setNodes","setEdges","getEdges","fitView","targetNodes","transitions","node","_getNode","from","to","t","elapsed","s","currNodes","type","finalNodes","stop","current","padding"],"sources":["/home/vijay-rathod/Downloads/workflow-builder-example (2)/src/hooks/useLayout.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useReactFlow, useStore, Node, Edge, ReactFlowState } from \"reactflow\";\nimport { stratify, tree } from \"d3-hierarchy\";\nimport { timer } from \"d3-timer\";\n\nconst options = { duration: 300 };\n\nfunction configureLayout(direction: \"TB\" | \"LR\") {\n  const layout = tree<Node>();\n\n  if (direction === \"TB\") {\n    // Top-to-Bottom\n    layout.nodeSize([200, 150]); // [width, height]\n  } else if (direction === \"LR\") {\n    // Left-to-Right\n    layout.nodeSize([150, 200]); // [height, width]\n  }\n\n  console.log({ direction });\n\n  layout.separation(() => 1); // Create equal spacing between nodes\n  return layout;\n}\n\n// the layouting function\n// accepts current nodes and edges and returns the layouted nodes with their updated positions\nfunction layoutNodes(nodes: Node[], edges: Edge[]): Node[] {\n  // if there are no nodes we can't calculate a layout\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  // run the layout algorithm with the hierarchy data structure\n  const root = configureLayout(hierarchy);\n\n  // convert nodes and edges into a hierarchical object for using it with the layout function\n  const hierarchy = stratify<Node>()\n    .id((d) => d.id)\n    // get the id of each node by searching through the edges\n    // this only works if every node has one connection\n    .parentId((d: Node) => edges.find((e: Edge) => e.target === d.id)?.source)(\n    nodes\n  );\n\n  // convert the hierarchy back to react flow nodes (the original node is stored as d.data)\n  // we only extract the position from the d3 function\n  return root\n    .descendants()\n    .map((d) => ({ ...d.data, position: { x: d.x, y: d.y } }));\n}\n\n// this is the store selector that is used for triggering the layout, this returns the number of nodes once they change\nconst nodeCountSelector = (state: ReactFlowState) => state.nodeInternals.size;\n\nfunction useLayout() {\n  // this ref is used to fit the nodes in the first run\n  // after first run, this is set to false\n  const initial = useRef(true);\n\n  // we are using nodeCount as the trigger for the re-layouting\n  // whenever the nodes length changes, we calculate the new layout\n  const nodeCount = useStore(nodeCountSelector);\n\n  const { getNodes, getNode, setNodes, setEdges, getEdges, fitView } =\n    useReactFlow();\n\n  useEffect(() => {\n    // get the current nodes and edges\n    const nodes = getNodes();\n    const edges = getEdges();\n\n    // run the layout and get back the nodes with their updated positions\n    const targetNodes = layoutNodes(nodes, edges);\n\n    // if you do not want to animate the nodes, you can uncomment the following line\n    // return setNodes(targetNodes);\n\n    // to interpolate and animate the new positions, we create objects that contain the current and target position of each node\n    const transitions = targetNodes.map((node) => {\n      return {\n        id: node.id,\n        // this is where the node currently is placed\n        from: getNode(node.id)?.position || node.position,\n        // this is where we want the node to be placed\n        to: node.position,\n        node,\n      };\n    });\n\n    // create a timer to animate the nodes to their new positions\n    const t = timer((elapsed: number) => {\n      const s = elapsed / options.duration;\n\n      const currNodes = transitions.map(({ node, from, to }) => {\n        return {\n          id: node.id,\n          position: {\n            // simple linear interpolation\n            x: from.x + (to.x - from.x) * s,\n            y: from.y + (to.y - from.y) * s,\n          },\n          data: { ...node.data },\n          type: node.type,\n        };\n      });\n\n      setNodes(currNodes);\n\n      // this is the final step of the animation\n      if (elapsed > options.duration) {\n        // we are moving the nodes to their destination\n        // this needs to happen to avoid glitches\n        const finalNodes = transitions.map(({ node, to }) => {\n          return {\n            id: node.id,\n            position: {\n              x: to.x,\n              y: to.y,\n            },\n            data: { ...node.data },\n            type: node.type,\n          };\n        });\n\n        setNodes(finalNodes);\n\n        // stop the animation\n        t.stop();\n\n        // in the first run, fit the view\n        if (!initial.current) {\n          fitView({ duration: 200, padding: 0.2 });\n        }\n        initial.current = false;\n      }\n    });\n\n    return () => {\n      t.stop();\n    };\n  }, [nodeCount, getEdges, getNodes, getNode, setNodes, fitView, setEdges]);\n}\n\nexport default useLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}