{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useReactFlow, getOutgoers } from 'reactflow';\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking a workflow node\n// on workflow node click: create a new child node of the clicked node\nexport function useNodeClick(id) {\n  _s();\n  const {\n    setEdges,\n    setNodes,\n    getNodes,\n    getEdges,\n    getNode\n  } = useReactFlow();\n  const onClick = useCallback(() => {\n    // we need the parent node object for positioning the new child node\n    const parentNode = getNode(id);\n    if (!parentNode) {\n      return;\n    }\n\n    // create a unique id for the child node\n    const childNodeId = uuid();\n\n    // create a unique id for the placeholder (the placeholder gets added to the new child node)\n    const childPlaceholderId = uuid();\n\n    // create the child node\n    const childNode = {\n      id: childNodeId,\n      // we try to place the child node close to the calculated position from the layout algorithm\n      // 150 pixels below the parent node, this spacing can be adjusted in the useLayout hook\n      position: {\n        x: parentNode.position.x,\n        y: parentNode.position.y + 150\n      },\n      type: 'workflow',\n      data: {\n        label: randomLabel()\n      }\n    };\n\n    // create a placeholder for the new child node\n    // we want to display a placeholder for all workflow nodes that do not have a child already\n    // as the newly created node will not have a child, it gets this placeholder\n    const childPlaceholderNode = {\n      id: childPlaceholderId,\n      // we place the placeholder 150 pixels below the child node, spacing can be adjusted in the useLayout hook\n      position: {\n        x: childNode.position.x,\n        y: childNode.position.y + 150\n      },\n      type: 'placeholder',\n      data: {\n        label: '+'\n      }\n    };\n\n    // we need to create a connection from parent to child\n    const childEdge = {\n      id: `${parentNode.id}=>${childNodeId}`,\n      source: parentNode.id,\n      target: childNodeId,\n      type: 'workflow'\n    };\n\n    // we need to create a connection from child to our placeholder\n    const childPlaceholderEdge = {\n      id: `${childNodeId}=>${childPlaceholderId}`,\n      source: childNodeId,\n      target: childPlaceholderId,\n      type: 'placeholder'\n    };\n\n    // if the clicked node has had any placeholders as children, we remove them because it will get a child now\n    const existingPlaceholders = getOutgoers(parentNode, getNodes(), getEdges()).filter(node => node.type === 'placeholder').map(node => node.id);\n\n    // add the new nodes (child and placeholder), filter out the existing placeholder nodes of the clicked node\n    setNodes(nodes => nodes.filter(node => !existingPlaceholders.includes(node.id)).concat([childNode, childPlaceholderNode]));\n\n    // add the new edges (node -> child, child -> placeholder), filter out any placeholder edges\n    setEdges(edges => edges.filter(edge => !existingPlaceholders.includes(edge.target)).concat([childEdge, childPlaceholderEdge]));\n  }, [getEdges, getNode, getNodes, id, setEdges, setNodes]);\n  return onClick;\n}\n_s(useNodeClick, \"O6MUsg9hM9CZCZBSSfO0wkfX4No=\", false, function () {\n  return [useReactFlow];\n});\nexport default useNodeClick;","map":{"version":3,"names":["useCallback","useReactFlow","getOutgoers","uuid","randomLabel","useNodeClick","id","_s","setEdges","setNodes","getNodes","getEdges","getNode","onClick","parentNode","childNodeId","childPlaceholderId","childNode","position","x","y","type","data","label","childPlaceholderNode","childEdge","source","target","childPlaceholderEdge","existingPlaceholders","filter","node","map","nodes","includes","concat","edges","edge"],"sources":["/home/vijay-rathod/Downloads/workflow-builder-example (2)/src/hooks/useNodeClick.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { NodeProps, useReactFlow, getOutgoers } from 'reactflow';\n\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking a workflow node\n// on workflow node click: create a new child node of the clicked node\nexport function useNodeClick(id: NodeProps['id']) {\n  const { setEdges, setNodes, getNodes, getEdges, getNode } = useReactFlow();\n\n  const onClick = useCallback(() => {\n    // we need the parent node object for positioning the new child node\n    const parentNode = getNode(id);\n\n    if (!parentNode) {\n      return;\n    }\n\n    // create a unique id for the child node\n    const childNodeId = uuid();\n\n    // create a unique id for the placeholder (the placeholder gets added to the new child node)\n    const childPlaceholderId = uuid();\n\n    // create the child node\n    const childNode = {\n      id: childNodeId,\n      // we try to place the child node close to the calculated position from the layout algorithm\n      // 150 pixels below the parent node, this spacing can be adjusted in the useLayout hook\n      position: { x: parentNode.position.x, y: parentNode.position.y + 150 },\n      type: 'workflow',\n      data: { label: randomLabel() },\n    };\n\n    // create a placeholder for the new child node\n    // we want to display a placeholder for all workflow nodes that do not have a child already\n    // as the newly created node will not have a child, it gets this placeholder\n    const childPlaceholderNode = {\n      id: childPlaceholderId,\n      // we place the placeholder 150 pixels below the child node, spacing can be adjusted in the useLayout hook\n      position: { x: childNode.position.x, y: childNode.position.y + 150 },\n      type: 'placeholder',\n      data: { label: '+' },\n    };\n\n    // we need to create a connection from parent to child\n    const childEdge = {\n      id: `${parentNode.id}=>${childNodeId}`,\n      source: parentNode.id,\n      target: childNodeId,\n      type: 'workflow',\n    };\n\n    // we need to create a connection from child to our placeholder\n    const childPlaceholderEdge = {\n      id: `${childNodeId}=>${childPlaceholderId}`,\n      source: childNodeId,\n      target: childPlaceholderId,\n      type: 'placeholder',\n    };\n\n    // if the clicked node has had any placeholders as children, we remove them because it will get a child now\n    const existingPlaceholders = getOutgoers(parentNode, getNodes(), getEdges())\n      .filter((node) => node.type === 'placeholder')\n      .map((node) => node.id);\n\n    // add the new nodes (child and placeholder), filter out the existing placeholder nodes of the clicked node\n    setNodes((nodes) =>\n      nodes.filter((node) => !existingPlaceholders.includes(node.id)).concat([childNode, childPlaceholderNode])\n    );\n\n    // add the new edges (node -> child, child -> placeholder), filter out any placeholder edges\n    setEdges((edges) =>\n      edges.filter((edge) => !existingPlaceholders.includes(edge.target)).concat([childEdge, childPlaceholderEdge])\n    );\n  }, [getEdges, getNode, getNodes, id, setEdges, setNodes]);\n\n  return onClick;\n}\n\nexport default useNodeClick;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}