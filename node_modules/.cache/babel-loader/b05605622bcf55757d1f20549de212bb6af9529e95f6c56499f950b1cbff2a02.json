{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReactFlow } from \"reactflow\";\nimport { uuid, randomLabel } from \"../utils\";\n\n// this hook implements the logic for clicking the button on a workflow edge\n// on edge click: create a node in between the two nodes that are connected by the edge\nfunction useEdgeClick(id) {\n  _s();\n  const {\n    setEdges,\n    setNodes,\n    getNode,\n    getEdge\n  } = useReactFlow();\n  const handleEdgeClick = () => {\n    // first we retrieve the edge object to get the source and target id\n    const edge = getEdge(id);\n    if (!edge) {\n      return;\n    }\n\n    // we retrieve the target node to get its position\n    const targetNode = getNode(edge.target);\n    if (!targetNode) {\n      return;\n    }\n\n    // create a unique id for newly added elements\n    const insertNodeId = uuid();\n\n    // this is the node object that will be added in between source and target node\n    const insertNode = {\n      id: insertNodeId,\n      // we place the node at the current position of the target (prevents jumping)\n      position: {\n        x: targetNode.position.x,\n        y: targetNode.position.y\n      },\n      data: {\n        label: randomLabel()\n      },\n      type: \"workflow\"\n    };\n\n    // new connection from source to new node\n    const sourceEdge = {\n      id: `${edge.source}->${insertNodeId}`,\n      source: edge.source,\n      target: insertNodeId,\n      type: \"workflow\"\n    };\n\n    // new connection from new node to target\n    const targetEdge = {\n      id: `${insertNodeId}->${edge.target}`,\n      source: insertNodeId,\n      target: edge.target,\n      type: \"workflow\"\n    };\n\n    // remove the edge that was clicked as we have a new connection with a node inbetween\n    setEdges(edges => edges.filter(e => e.id !== id).concat([sourceEdge, targetEdge]));\n\n    // insert the node between the source and target node in the react flow state\n    setNodes(nodes => {\n      const targetNodeIndex = nodes.findIndex(node => node.id === edge.target);\n      return [...nodes.slice(0, targetNodeIndex), insertNode, ...nodes.slice(targetNodeIndex, nodes.length)];\n    });\n  };\n  return handleEdgeClick;\n}\n_s(useEdgeClick, \"dAHNQBmY/0THOIKkC+GoQYjfjyU=\", false, function () {\n  return [useReactFlow];\n});\nexport default useEdgeClick;","map":{"version":3,"names":["useReactFlow","uuid","randomLabel","useEdgeClick","id","_s","setEdges","setNodes","getNode","getEdge","handleEdgeClick","edge","targetNode","target","insertNodeId","insertNode","position","x","y","data","label","type","sourceEdge","source","targetEdge","edges","filter","e","concat","nodes","targetNodeIndex","findIndex","node","slice","length"],"sources":["/home/vijay-rathod/Downloads/workflow-builder-example (2)/src/hooks/useEdgeClick.ts"],"sourcesContent":["import { EdgeProps, useReactFlow } from \"reactflow\";\n\nimport { uuid, randomLabel } from \"../utils\";\n\n// this hook implements the logic for clicking the button on a workflow edge\n// on edge click: create a node in between the two nodes that are connected by the edge\nfunction useEdgeClick(id: EdgeProps[\"id\"]) {\n  const { setEdges, setNodes, getNode, getEdge } = useReactFlow();\n\n  const handleEdgeClick = () => {\n    // first we retrieve the edge object to get the source and target id\n    const edge = getEdge(id);\n\n    if (!edge) {\n      return;\n    }\n\n    // we retrieve the target node to get its position\n    const targetNode = getNode(edge.target);\n\n    if (!targetNode) {\n      return;\n    }\n\n    // create a unique id for newly added elements\n    const insertNodeId = uuid();\n\n    // this is the node object that will be added in between source and target node\n    const insertNode = {\n      id: insertNodeId,\n      // we place the node at the current position of the target (prevents jumping)\n      position: { x: targetNode.position.x, y: targetNode.position.y },\n      data: { label: randomLabel() },\n      type: \"workflow\",\n    };\n\n    // new connection from source to new node\n    const sourceEdge = {\n      id: `${edge.source}->${insertNodeId}`,\n      source: edge.source,\n      target: insertNodeId,\n      type: \"workflow\",\n    };\n\n    // new connection from new node to target\n    const targetEdge = {\n      id: `${insertNodeId}->${edge.target}`,\n      source: insertNodeId,\n      target: edge.target,\n      type: \"workflow\",\n    };\n\n    // remove the edge that was clicked as we have a new connection with a node inbetween\n    setEdges((edges) =>\n      edges.filter((e) => e.id !== id).concat([sourceEdge, targetEdge])\n    );\n\n    // insert the node between the source and target node in the react flow state\n    setNodes((nodes) => {\n      const targetNodeIndex = nodes.findIndex(\n        (node) => node.id === edge.target\n      );\n\n      return [\n        ...nodes.slice(0, targetNodeIndex),\n        insertNode,\n        ...nodes.slice(targetNodeIndex, nodes.length),\n      ];\n    });\n  };\n\n  return handleEdgeClick;\n}\n\nexport default useEdgeClick;\n"],"mappings":";AAAA,SAAoBA,YAAY,QAAQ,WAAW;AAEnD,SAASC,IAAI,EAAEC,WAAW,QAAQ,UAAU;;AAE5C;AACA;AACA,SAASC,YAAYA,CAACC,EAAmB,EAAE;EAAAC,EAAA;EACzC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGT,YAAY,CAAC,CAAC;EAE/D,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA,MAAMC,IAAI,GAAGF,OAAO,CAACL,EAAE,CAAC;IAExB,IAAI,CAACO,IAAI,EAAE;MACT;IACF;;IAEA;IACA,MAAMC,UAAU,GAAGJ,OAAO,CAACG,IAAI,CAACE,MAAM,CAAC;IAEvC,IAAI,CAACD,UAAU,EAAE;MACf;IACF;;IAEA;IACA,MAAME,YAAY,GAAGb,IAAI,CAAC,CAAC;;IAE3B;IACA,MAAMc,UAAU,GAAG;MACjBX,EAAE,EAAEU,YAAY;MAChB;MACAE,QAAQ,EAAE;QAAEC,CAAC,EAAEL,UAAU,CAACI,QAAQ,CAACC,CAAC;QAAEC,CAAC,EAAEN,UAAU,CAACI,QAAQ,CAACE;MAAE,CAAC;MAChEC,IAAI,EAAE;QAAEC,KAAK,EAAElB,WAAW,CAAC;MAAE,CAAC;MAC9BmB,IAAI,EAAE;IACR,CAAC;;IAED;IACA,MAAMC,UAAU,GAAG;MACjBlB,EAAE,EAAE,GAAGO,IAAI,CAACY,MAAM,KAAKT,YAAY,EAAE;MACrCS,MAAM,EAAEZ,IAAI,CAACY,MAAM;MACnBV,MAAM,EAAEC,YAAY;MACpBO,IAAI,EAAE;IACR,CAAC;;IAED;IACA,MAAMG,UAAU,GAAG;MACjBpB,EAAE,EAAE,GAAGU,YAAY,KAAKH,IAAI,CAACE,MAAM,EAAE;MACrCU,MAAM,EAAET,YAAY;MACpBD,MAAM,EAAEF,IAAI,CAACE,MAAM;MACnBQ,IAAI,EAAE;IACR,CAAC;;IAED;IACAf,QAAQ,CAAEmB,KAAK,IACbA,KAAK,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC,CAACwB,MAAM,CAAC,CAACN,UAAU,EAAEE,UAAU,CAAC,CAClE,CAAC;;IAED;IACAjB,QAAQ,CAAEsB,KAAK,IAAK;MAClB,MAAMC,eAAe,GAAGD,KAAK,CAACE,SAAS,CACpCC,IAAI,IAAKA,IAAI,CAAC5B,EAAE,KAAKO,IAAI,CAACE,MAC7B,CAAC;MAED,OAAO,CACL,GAAGgB,KAAK,CAACI,KAAK,CAAC,CAAC,EAAEH,eAAe,CAAC,EAClCf,UAAU,EACV,GAAGc,KAAK,CAACI,KAAK,CAACH,eAAe,EAAED,KAAK,CAACK,MAAM,CAAC,CAC9C;IACH,CAAC,CAAC;EACJ,CAAC;EAED,OAAOxB,eAAe;AACxB;AAACL,EAAA,CAlEQF,YAAY;EAAA,QAC8BH,YAAY;AAAA;AAmE/D,eAAeG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}